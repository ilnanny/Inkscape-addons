# -*- coding: utf-8 -*-
"""
Created on Jul 25, 2015

@author: jrm
"""
import enaml
import traceback
from enaml.workbench.api import Extension, PluginManifest, ExtensionPoint
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, MenuItem, ItemGroup, Autostart
from inkcut.core.utils import menu_icon, log
from .extensions import (
    DEVICE_DRIVER_POINT, DEVICE_PROTOCOL_POINT, DEVICE_TRANSPORT_POINT,
    DEVICE_FILTER_POINT
)
from inkcut.ui.extensions import DOCK_ITEM_POINT, DockItem
from twisted.internet import defer


def device_setup(event):
    with enaml.imports():
        from .dialogs import DeviceDialog
    workbench = event.workbench
    ui = workbench.get_plugin('enaml.workbench.ui')
    plugin = workbench.get_plugin('inkcut.device')
    DeviceDialog(ui.window, plugin=plugin).exec_()


@defer.inlineCallbacks
def job_start(event):
    """ Pass the job to the current device for it to cut. Watch
    the process in the task dialog.
    """
    workbench = event.workbench
    job = event.parameters.get('job')
    if not job:
        job = workbench.get_plugin('inkcut.job').job
    if not job.document or not job.model:
        workbench.message_warning("Error starting job", 
                                  "No file is open! Please open a file first.")
        return

    plugin = workbench.get_plugin('inkcut.device')
    device = plugin.device
    if not device:
        workbench.message_warning("Error starting job", 
                                  "No device is setup! "
                                  "Please select Device->Setup from the menu.")
        return

    try:
        yield defer.maybeDeferred(plugin.submit, job)
    except (RuntimeError, IOError) as e:
        log.error(traceback.format_exc())
        workbench.message_warning("Error starting job", str(e))
    except Exception as e:
        log.error(traceback.format_exc())
        workbench.message_critical("Error processing job", traceback.format_exc())


def device_progress_dock_item_factory():
    with enaml.imports():
        from .view import DeviceProgressDockItem
    return DeviceProgressDockItem


def plugin_factory():
    from .plugin import DevicePlugin
    return DevicePlugin()


enamldef DeviceManifest(PluginManifest):
    """ Add new protocols here or within any other plugin.
    
    All protocols should implement the IDeviceProtocol and then
    register as an extension to the point 'inkcut.device.protocols'
    
    """
    id = 'inkcut.device'

    factory = plugin_factory

    ExtensionPoint:
        id = DEVICE_DRIVER_POINT
        description = """ Provides an extension point where plugins can
        register a device that the application may use.
        
        """

    ExtensionPoint:
        id = DEVICE_PROTOCOL_POINT
        description = """ Provides an extension point where plugins can
        register protocols that any device may use. 
        
        """

    ExtensionPoint:
        id = DEVICE_TRANSPORT_POINT
        description = """ Provides an extension point where plugins can
        register a communication interface for transporting data.  
        
        """
    
    ExtensionPoint:
        id = DEVICE_FILTER_POINT
        description = """ Provides an extension point where plugins can
        register filters to manipulate path data before or after it is 
        processed by the device.  
        
        """

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'inkcut.device.setup'
            handler = device_setup
        Command:
            id = 'inkcut.device.submit'
            handler = job_start

    Extension:
        id = 'items'
        point = DOCK_ITEM_POINT
        DockItem:
            plugin_id = 'inkcut.device'
            factory = device_progress_dock_item_factory
            layout = 'bottom'

    Extension:
        id = 'actions'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/device'
            label = 'Device'
            after = 'file'
            before = 'help'
            ItemGroup:
                id = 'device'
        ActionItem:
            path = '/device/setup'
            label = 'Setup...'
            shortcut = 'Ctrl+Alt+P'
            command = 'inkcut.device.setup'
            icon = menu_icon('printer')

        ActionItem:
            path = '/device/send'
            label = 'Send to device'
            shortcut = 'Ctrl+P'
            after = 'setup'
            command = 'inkcut.device.submit'
            icon = menu_icon('chart_curve_go')
